---
title: "Lab 03: Multiple Linear Regression"
subtitle: "Childcare costs in North Carolina"
execute:
  freeze: auto
  echo: true
  eval: false
  warning: false
  message: false
format: html
---

::: callout-important
# Due date

This lab is due on **Tuesday, February 4 at 11:59pm.** To be considered on time, the following must be done by the due date:

-   Final `.qmd` and `.pdf` files pushed to your team's GitHub repo
-   Final `.pdf` file submitted on Gradescope
:::

# Multiple Linear Regression

In this lab, you will use multiple linear regression to predict a county's median childcare cost for preschool-age children based on demographic and labor market factors. You will also start working with your lab teams, write a team agreement, and be introduced to using GitHub for collaboration.

# **Learning goals**

By the end of the lab you will be able to‚Ä¶

-   use multiple linear regression to describe the relationship between a response variable and multiple predictor variables.
-   interpret the coefficients of a multiple linear regression model.
-   use testing data to assess a model's predictive performance.
-   collaborate with others using a single Github repo.

# **Meet your team!**

[**Click here**](https://prodduke-my.sharepoint.com/:x:/g/personal/mt324_duke_edu/EWmBSHOfYhJLlxYJKEDFpT8BZNmQsC41rm4hA6uaOqrA1w?e=sUNxBJ) to see the team assignments for STA 221. This will be your team for labs and the final project. Before you get started on the lab, complete the following:

‚úÖ Come up with a team name. You can‚Äôt use the same name as another team, so I encourage you to be creative! Your TA will get your team name by the end of lab.

‚úÖ Fill out the team agreement. This will help you figure out a plan for communication, and working together during labs and outside of class. You can find the team agreement in the GitHub repo **team-agreement-\[github_team_name\]**.

-   Have **one person** from the team clone the repo and start a new RStudio project. This person will type the team‚Äôs responses as you discuss the questions in the agreement. No one else in the team should type at this point but should be contributing to the discussion.

-   Be sure to push the completed agreement to GitHub. Each team member can refer to the document in this repo or download the PDF of the agreement for future reference. *You do [not]{.underline} need to submit the agreement on Gradescope.*

# **Getting started**

-   Go to the [sta221-sp25](https://www.github.com/sta221-sp25) organization on GitHub. Click on the repo with the prefix **lab-03**. It contains the starter documents you need to complete the lab.

-   Clone the repo and start a new project in RStudio. See the [Lab 00 instructions](https://sta221-sp25.netlify.app/labs/lab-00#getting-started) for details on cloning a repo and starting a new project in R.

-   Each person on the team should clone the repository and open a new project in RStudio. Throughout the lab, each person should get a chance to make commits and push to the repo.

-   **Do not make any changes to the `.qmd` file until the instructions tell you do to so.**

# Workflow: Using Git and GitHub as a team

::: callout-important
Assign each person on your team a number 1 through 4. For teams of three, Team Member 1 can take on the role of Team Member 4.

The following exercises must be done in order. **Only one person should type in the `.qmd` file, commit, and push updates at a time.** When it is not your turn to type, you should still share ideas and contribute to the team's discussion.
:::

::: {.callout-important appearance="simple"}
‚å®Ô∏è **Team Member 1: Hands on the keyboard.**

üôÖüèΩ All other team members: Hands off the keyboard until otherwise instructed![^1]
:::

[^1]: Don't trust yourself to keep your hands off the keyboard? Put them in your pocket or cross your arms. No matter how silly it might feel, resist the urge to touch your keyboard until otherwise instructed!

Change the author to your team name and include each team member's name in the `author` field of the YAML in the following format: `Team Name: Member 1, Member 2, Member 3, Member 4`.

::: render-commit-push
**Team Member 1:** Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the `.qmd` and PDF documents, and finally push the changes to GitHub.

<br>
:::

::: pull
**Team Members 2, 3, 4:** Once Team Member 1 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team's lab repo. Then, in RStudio, click the **Pull** button in the Git pane to get the updated document. You should see the updated name in your `.qmd` file.
:::

# Packages

You will use the following packages in today‚Äôs lab. Add other packages as needed.

```{r}
#| label: load-packages

library(tidyverse)
library(tidymodels)
library(knitr)
```

# Data

Today's data was pulled from the [National Database of Childcare Prices](https://www.dol.gov/agencies/wb/topics/featured-childcare) and was featured on the data visualization challenge [TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-05-09) in May 2023. This lab focuses on a subset of the data that contains information about childcare costs and labor market conditions across the 100 counties in North Carolina. **This data set for this lab contains values for the year 2018.**

You will work with two data sets in this analysis - a training set and a test set. You will primarily work with the **training** set, observations that are used to explore the data and fit the regression model. At the end of the analysis, you will use the **test** set of observations to assess the predictive power of the model. Observations are randomly assigned to the training and test sets, so each set can be treated as representative of the original data.

```{r}
#| label: load-data
childcare_train <- read_csv("data/childcare-costs-2018-train.csv")
childcare_test <- read_csv("data/childcare-costs-2018-test.csv")
```

**The response variable for this analysis is** `mc_preschool`, defined as weekly, full-time median price charged for center-based care for preschoolers (i.e. aged 36 through 54 months) based on the results reported in the market rate survey report for the county.

The full data dictionary is available in the `README` of the `data` folder in your GitHub repo. You can also find the full data dictionary on the TidyTuesday page.

# Exercises

**Goal:** The goal of this analysis is to use various demographic and labor-market factors to predict the median price of childcare for preschool-age children for counties in North Carolina.

::: callout-important
Write all code and narrative in your Quarto file. Write all narrative in complete sentences. Make sure the teaching team can read all of your code in your PDF document. This means you will need to break up long lines of code. One way to help avoid long lines of code is is start a new line after every pipe (`|>`) and plus sign (`+`).
:::

------------------------------------------------------------------------

::: render-commit-push
**Team Member 1**: Type the team‚Äôs responses to exercises 1 - 2.
:::

## Exercise 1

Let's start with some exploratory data analysis. Visualize the distribution of the response variable `mc_preschool` and calculate summary statistics. Describe the distribution of this variable, including the shape, center, spread, and presence of potential outliers.

::: callout-important
You will use the `childcare_train` for all analysis in Exercises 1 - 7.
:::

## Exercise 2

As you can see from the data dictionary in the `README` of the `data` folder, there are many interesting potential variables that could be included in the model to predict median childcare cost for preschool-age children. Therefore, we will do some *feature selection* and *feature design* to choose potential predictors and construct new ones.

As a team, select **four** variables you want to use as predictors for the model. For each variable, state the variable name, definition, and a brief explanation about why your team hypothesizes this will be a relevant predictor of median childcare costs. The explanation may (but is not required to) include some short exploratory analysis.

::: render-commit-push
**Team Member 1**: Knit, commit and push your changes to GitHub with an appropriate commit message again. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.
:::

::: pull
**All other team members**: **Pull** to get the updated documents from GitHub. Click on the .qmd file, and you should see the responses to exercises 1- 2.

**Team Member 2**: It‚Äôs your turn! Type the team‚Äôs response to exercises 3 - 4.
:::

## Exercise 3

Once we've identified potential predictor variables, we often need to transform some variables (e.g., change raw counts into proportions) or create new ones (e.g., create a categorical variable out of quantitative data) before fitting the regression model. This process is particularly useful when putting a variable in the model "as-is" may result in interpretation issues.

Choose one of the variables selected in the previous exercise. For this variable,

-   Transform the variable or use it to create a new variable. Be sure to save the variable to the `childcare_train` data frame.

-   Briefly explain your reasoning for the transformation or new variable.

-   Use visualizations and/or summary statistics to display the distribution of the original variable and the transformed / newly created variable. *Note: This is to help ensure the transformation / new variable is what you expect.*

<!-- An example using `h_6to17_both_work` is below. Note you cannot use this variable for your transformation / new variable. -->

<!-- ::: {.callout-tip title="Example"} -->

<!-- Say we believe that the amount of households with two working parents increases demand for childcare services, and hence their price. We have the column `h_6to17_both_work` encoding the number of such households per county. The raw population count differs across county, so having a larger value of `h_6to17_both_work` may reflect population size and not necessarily imply the type of such household is more prevalent in the county. -->

<!-- A reasonable thing would be creating a variable encoding the *proportion* of households with both parents working. We could do this by creating a variable `p_6to17_both_work`: -->

<!-- ```{r} -->

<!-- #| eval: false -->

<!-- p_6to17_both_work = h_6to17_both_work / households -->

<!-- ``` -->

<!-- In this case, we would then use `p_6to17_both_work` not `h_6to17_both_work` as a predictor in the model. -->

<!-- ::: -->

You may decide to transform and/or create multiple new variables; however, you will only be graded on the one of them.

::: callout-important
You will use the transformed / new variable (not the original variable) in the model!
:::

## Exercise 4

Now let's conduct bivariate exploratory data analysis. Visualize the relationship between the response variable and one of your predictor variables.

Write two distinct observations from the visualization.

::: render-commit-push
**Team Member 2**: Knit, commit and push your changes to GitHub with an appropriate commit message again. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.
:::

::: pull
**All other team members**: **Pull** to get the updated documents from GitHub. Click on the .qmd file, and you should see the responses to exercises 3 - 4.

**Team Member 3**: It‚Äôs your turn! Type the team‚Äôs response to exercises 5 - 6.
:::

## Exercise 5

Use the matrix form of the model to represent the regression model with the variables you selected and transformed/created in exercises 2 and 3 as the predictors. For each symbol in the model

-   describe what it represents, and
-   state the dimensions.

The description and dimensions should be in the context of these data, not in general.

## Exercise 6

Use `lm()` to fit the regression model you described in the previous exercise.

-   Neatly display the model using a reasonable number of digits.
-   Interpret the coefficient for one predictor in the model.

::: render-commit-push
**Team Member 3**: Knit, commit and push your changes to GitHub with an appropriate commit message again. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.
:::

::: pull
**All other team members**: **Pull** to get the updated documents from GitHub. Click on the .qmd file, and you should see the responses to exercises 5 - 6.

**Team Member 4**: It‚Äôs your turn! Type the team‚Äôs response to exercises 7 - 9.
:::

## Exercise 7

Now let's assess the fit of the model.

-   How much of the variability in the childcare costs is explained by your chosen predictor variables?
-   Based on this, do you think the model explains a significant portion of the variability in childcare costs for preschool-age children in North Carolina? Briefly explain.

## Exercise 8

Now let's use the testing data to explore the predictive power of the model.

-   Add the variable you created in Exercise 3 to the testing data.

-   Then, use the code below to compute the predicted childcare costs for the observations in the testing data using the `predict` function.

```{r}
#| eval: false

# compute predictions
pred <- predict(childcare_fit, childcare_test)

# add predictions to testing data set
childcare_test <- childcare_test |>
  mutate(pred = pred)
```

## Exercise 9

-   Compute the RMSE for the test set, and compare it to the standard deviation of the response variable `mc_preschool`.
-   How do these values compare?
-   Based on this, how would assess the predictive power of the model?

::: render-commit-push
**Team Member 4**: Render, commit and push your changes to GitHub with an appropriate commit message again. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards and the rest of the team can see the completed lab.
:::

::: pull
**All other team members**: **Pull** to get the updated documents from GitHub. Click on the .qmd file, and you should see the team‚Äôs completed lab!
:::

## Exercise 10

If you haven't already, make sure you have completed the team agreement (see the instructions in \[Meet your team!\]).

# Wrapping up

::: render-commit-push
**Team Member 2**: Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the .qmd and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.
:::

::: pull
**All other team members**: Once Team Member 3 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team‚Äôs lab repo. Then, in RStudio, click the Pull button in the Git pane to get the updated document. You should see the final version of your .qmd file.
:::

# Submission

You will submit the PDF documents for labs, homework, and exams in to Gradescope as part of your final submission.

::: callout-warning
Before you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.

Remember ‚Äì you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.
:::

To submit your assignment:

-   Access Gradescope through the menu on the [STA 221 Canvas site.](https://canvas.duke.edu/courses/51767)

-   Click on the assignment, and you‚Äôll be prompted to submit it.

-   Mark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be ‚Äúchecked‚Äù).

-   Select the first page of your .PDF submission to be associated with the *‚ÄúWorkflow & formatting‚Äù* section.

# Grading

| Component             | Points |
|:----------------------|:-------|
| Ex 1                  | 5      |
| Ex 2                  | 5      |
| Ex 3                  | 6      |
| Ex 4                  | 4      |
| Ex 5                  | 5      |
| Ex 6                  | 4      |
| Ex 7                  | 4      |
| Ex 8                  | 2      |
| Ex 9                  | 5      |
| Ex 10                 | 5      |
| Workflow & formatting | 5      |

The ‚ÄúWorkflow & formatting‚Äù grade is to assess the reproducible workflow and collaboration. This includes having at least one meaningful commit from each team member and updating the team name and date in the YAML.
