{
  "hash": "e2c8fe3a31024a568c2ea9e1cdfefa28",
  "result": {
    "markdown": "---\ntitle: \"AE 07: Model evaluation\"\nsubtitle: \"Songs on Spotify\"\ndate: \"Sep 25, 2023\"\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta210-fa23) and locate your `ae-07` repo to get started.\n\nRender, commit, and push your responses to GitHub by the end of class. The responses are due in your GitHub repo no later than Thursday, September 28 at 11:59pm.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(patchwork) #arrange plots in a grid\n```\n:::\n\n\n## Data\n\nThe data set for this assignment is a subset from the [Spotify Songs](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md) Tidy Tuesday data set. The data were originally obtained from Spotify using the **spotifyr** R package.\n\nIt contains numerous characteristics for each song. You can see the full list of variables and definitions [here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md). This analysis will focus specifically on the following variables:\n\n| variable         | class     | description                                                                                                                                                                                                                                                                                                                                                                               |\n|:-----------------|:----------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| track_id         | character | Song unique ID                                                                                                                                                                                                                                                                                                                                                                            |\n| track_name       | character | Song Name                                                                                                                                                                                                                                                                                                                                                                                 |\n| track_artist     | character | Song Artist                                                                                                                                                                                                                                                                                                                                                                               |\n| track_popularity | double    | Song Popularity (0-100) where higher is better                                                                                                                                                                                                                                                                                                                                            |\n| energy           | double    | Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. |\n| valence          | double    | A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).                                                                                                                                         |\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify <- read_csv(\"data/spotify-popular.csv\")\n```\n:::\n\n\nAre high energy songs more positive? To answer this question, we'll analyze data on some of the most popular songs on Spotify, i.e. those with `track_popularity >= 80`. We'll use linear regression to fit a model to predict a song's positiveness (`valence`) based on its energy level (`energy`).\n\nBelow are plots as part of the exploratory data analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data = spotify, aes(x = valence)) + \n  geom_histogram() + \n  labs(title = \"Distribution of Valence\", \n       subtitle = \" for Popular songs on Spotify\", \n       x = \"Valence\")\n\np2 <- ggplot(data = spotify, aes(x = energy)) + \n  geom_histogram() + \n  labs(title = \"Distribution of Energy\", \n       subtitle = \"for Popular songs on Spotify\", \n       x = \"Energy\")\np1 + p2\n```\n\n::: {.cell-output-display}\n![](ae-07-model-eval_files/figure-html/univariate-eda-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = spotify, aes(x = energy, y = valence)) + \n  geom_point() + \n  labs(title = \"Valence vs. Energy\", \n       subtitle = \"Popular songs on Spotify\", \n       x = \"Energy\", \n       y = \"Valence\")\n```\n\n::: {.cell-output-display}\n![](ae-07-model-eval_files/figure-html/bivariate-eda-1.png){width=672}\n:::\n:::\n\n\n## Model with 90% CI for coefficients\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_fit <- linear_reg() |>\n  fit(valence ~ energy, data = spotify)\n\ntidy(spotify_fit, conf.int = TRUE, conf.level = 0.9) |> \n  kable(digits = 3)\n```\n\n::: {.cell-output-display}\n|term        | estimate| std.error| statistic| p.value| conf.low| conf.high|\n|:-----------|--------:|---------:|---------:|-------:|--------:|---------:|\n|(Intercept) |    0.121|     0.035|     3.401|   0.001|    0.062|     0.179|\n|energy      |    0.614|     0.054|    11.321|   0.000|    0.525|     0.703|\n:::\n:::\n\n\n## Create augmented data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_aug <- augment(spotify_fit$fit)\n```\n:::\n\n\n## Create residual plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = spotify_aug, aes(x = .fitted, y = .resid)) + \n  geom_point() + \n  geom_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(x = \"Fitted values\", \n       y = \"Residuals\", \n       title = \"Residuals vs. fitted\")\n```\n\n::: {.cell-output-display}\n![](ae-07-model-eval_files/figure-html/resid-vs-fitted-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_hist <- ggplot(data = spotify_aug, aes(x = .resid)) + \n  geom_histogram() + \n  labs(x = \"Residuals\", \n       title = \"Distribution of residuals\")\n\nresid_qq <- ggplot(data = spotify_aug, aes(sample = .resid)) +\n  stat_qq() + \n  stat_qq_line() +\n  labs(x = \"Theoretical quantiles\",\n       y = \"Observed residuals\", \n       title = \"Normal QQ-plot\")\n\nresid_hist + resid_qq\n```\n\n::: {.cell-output-display}\n![](ae-07-model-eval_files/figure-html/resid-dist-1.png){width=672}\n:::\n:::\n\n\n## Exercise 1\n\nAssess the four model conditions. State whether the condition is satisfied and briefly explain your response.\n\n-   Linearity\n-   Constant variance\n-   Normality\n-   Independence\n\n## Exercise 2\n\nCalculate $R^2$ and interpret this value in the context of the data.\n\n\n::: {.cell}\n\n:::\n\n\n## Exercise 3\n\nCalculate RMSE and interpret this value in the context of the data.\n\n\n::: {.cell}\n\n:::\n\n\n## Evaluate response from ChatGPT\n\nI typed the following prompt into ChatGPT (\"an AI powered language model\") *\"How do you check the model conditions for simple linear regression?\"*\n\nThe response from ChatGPT shown below would receive partial credit. For each condition, state whether it is (1) correct, (2) incorrect and if so, what is wrong, (3) incomplete and if so, what is missing.\n\n> *In simple linear regression, you're trying to establish a linear relationship between two variables: a dependent variable (Y) and an independent variable (X). The model conditions or assumptions for simple linear regression are important to check to ensure that your model is valid and reliable. Here are the key assumptions and how to check them:*\n>\n> *1. Linearity Assumption:*\n>\n> -   *Assumption: The relationship between the independent variable (X) and the dependent variable (Y) is linear.*\n> -   *How to Check: Create a scatterplot of Y against X. If the points roughly form a straight line, the linearity assumption is likely met.*\n>\n> *2. Independence Assumption:*\n>\n> -   *Assumption: The residuals (the differences between observed Y and predicted Y) are independent of each other.*\n> -   *How to Check: Plot the residuals against the independent variable (X) or the predicted values. Look for patterns or trends in the residuals. There should be no clear structure or autocorrelation in the residuals.*\n>\n> *3. Homoscedasticity \\[Constant variance\\] Assumption:*\n>\n> -   *Assumption: The variance of the residuals is constant across all levels of the independent variable.*\n> -   *How to Check: Plot the residuals against the predicted values or the independent variable (X). The spread of the residuals should remain roughly constant across the range of X.*\n>\n> *4. Normality Assumption:*\n>\n> -   *Assumption: The residuals follow a normal distribution.*\n> -   *How to Check: Create a histogram or a normal probability plot (Q-Q plot) of the residuals. If the residuals are approximately normally distributed, they should follow a bell-shaped curve in the histogram and lie along a straight line in the Q-Q plot.*\n>\n> *It's important to note that these assumptions may not always hold perfectly in real-world data, and minor violations may not necessarily invalidate your model. However, if you detect significant violations of these assumptions, you may need to consider alternative modeling techniques or transformations of your data to address the issues.*\n\n::: callout-note\nYou will start to think about the answer in class and come up with a final answer with your group in Lab 04.\n:::\n\n## To submit the AE:\n\n::: callout-important\n-   Render the document to produce the PDF with all of your work from today's class.\n-   Push all your work to your `ae-07` repo on GitHub. (You do not submit AEs on Gradescope).\n:::\n",
    "supporting": [
      "ae-07-model-eval_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}