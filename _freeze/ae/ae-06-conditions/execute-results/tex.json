{
  "hash": "9ca7ecf5c27c4053d4fe4fddba28e94a",
  "result": {
    "markdown": "---\ntitle: \"AE 06: Conditions and model evaluation\"\nsubtitle: \"Songs on Spotify\"\ndate: \"Sep 20, 2022\"\nformat: pdf\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta210-fa23) and locate your `ae-06` repo to get started.\n\nRender, commit, and push your responses to GitHub by the end of class. The responses are due in your GitHub repo no later than Saturday, September 23 at 11:59pm.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(patchwork) #arrange plots in a grid\n```\n:::\n\n\n## Data\n\nThe data set for this assignment is a subset from the [Spotify Songs](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md) Tidy Tuesday data set. The data were originally obtained from Spotify using the **spotifyr** R package.\n\nIt contains numerous characteristics for each song. You can see the full list of variables and definitions [here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md). This analysis will focus specifically on the following variables:\n\n| variable         | class     | description                                                                                                                                                                                                                                                                                                                                                                               |\n|:----------------|:----------------|:-------------------------------------|\n| track_id         | character | Song unique ID                                                                                                                                                                                                                                                                                                                                                                            |\n| track_name       | character | Song Name                                                                                                                                                                                                                                                                                                                                                                                 |\n| track_artist     | character | Song Artist                                                                                                                                                                                                                                                                                                                                                                               |\n| track_popularity | double    | Song Popularity (0-100) where higher is better                                                                                                                                                                                                                                                                                                                                            |\n| energy           | double    | Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. |\n| valence          | double    | A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).                                                                                                                                         |\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify <- read_csv(\"data/spotify-popular.csv\")\n```\n:::\n\n\nAre high energy songs more positive? To answer this question, we'll analyze data on some of the most popular songs on Spotify, i.e. those with `track_popularity >= 80`. We'll use linear regression to fit a model to predict a song's positiveness (`valence`) based on its energy level (`energy`).\n\nBelow are plots as part of the exploratory data analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data = spotify, aes(x = valence)) + \n  geom_histogram() + \n  labs(title = \"Distribution of Valence\", \n       subtitle = \" for Popular songs on Spotify\", \n       x = \"Valence\")\n\np2 <- ggplot(data = spotify, aes(x = energy)) + \n  geom_histogram() + \n  labs(title = \"Distribution of Energy\", \n       subtitle = \"for Popular songs on Spotify\", \n       x = \"Energy\")\np1 + p2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](ae-06-conditions_files/figure-pdf/univariate-eda-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = spotify, aes(x = energy, y = valence)) + \n  geom_point() + \n  labs(title = \"Valence vs. Energy\", \n       subtitle = \"Popular songs on Spotify\", \n       x = \"Energy\", \n       y = \"Valence\")\n```\n\n::: {.cell-output-display}\n![](ae-06-conditions_files/figure-pdf/bivariate-eda-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Exercise 1\n\nFit a model using the `energy` of a song to predict its `valence`, i.e. positiveness. Include the 90% confidence interval for the coefficients, and display the output using 3 digits.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## add code\n```\n:::\n\n\n## Exercise 2\n\nLet's check the model conditions before doing any inference. Fill in the code below to use the `augment()` function to create a new data frame containing the residuals and fitted values (among other information)\n\n::: callout-important\nNote: Remove `#|eval: false` from the code chunk after you have filled in the code.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_aug <- augment(_____)\n```\n:::\n\n\n## Exercise 3\n\nMake a plot of the residual vs. fitted values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 4\n\nFill in the code to make a histogram of the residuals and a normal QQ-plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_hist <- ggplot(data = ____, aes(x = ____)) +\n  geom_histogram() +\n  labs(x = \"_____\", \n       y = \"_____\", \n       title = \"____\")\n\nresid_qq <- ggplot(data = ____, aes(sample = ____)) + \n  stat_qq() + \n ____() + \n  labs(x = \"_____\", \n       y = \"_____\", \n       title = \"____\")\n\nresid_hist + resid_qq\n```\n:::\n\n\n## Exercise 5\n\nAssess the four model conditions. Use the plots from the previous exercises to help make the assessment.\n\n-   Linearity\n-   Constant variance\n-   Normality\n-   Independence\n\n## Exercise 6\n\nCalculate $R^2$ and interpret this value in the context of the data.\n\n\n::: {.cell}\n\n:::\n\n\n## Exercise 7\n\nCalculate RMSE and interpret this value in the context of the data.\n\n\n::: {.cell}\n\n:::\n\n\n::: callout-important\nTo submit the AE:\n\n-   Render the document to produce the PDF with all of your work from today's class.\n-   Push all your work to your `ae-06` repo on GitHub. (You do not submit AEs on Gradescope).\n:::\n",
    "supporting": [
      "ae-06-conditions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}