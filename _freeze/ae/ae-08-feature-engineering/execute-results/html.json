{
  "hash": "998c31828bd46a93d7ab101724285c9f",
  "result": {
    "markdown": "---\ntitle: \"AE 08: Feature Engineering- Model workflow\"\nsubtitle: \"The Office\"\ndate: \"Oct 05, 2022\"\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta210-fa22) and locate your `ae-08`- to get started.\n\nThe AE is due on GitHub by Saturday, October 08 at 11:59pm.\n:::\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(viridis)\nlibrary(knitr)\n```\n:::\n\n\n## Load data\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_ratings <- read_csv(\"data/office_ratings.csv\")\n```\n:::\n\n\n## Exploratory data analysis\n\nBelow are two of the exploratory data analysis plots from lecture.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(office_ratings, aes(x = imdb_rating)) +\n  geom_histogram(binwidth = 0.25) +\n  labs(\n    title = \"The Office ratings\",\n    x = \"IMDB rating\"\n  )\n```\n\n::: {.cell-output-display}\n![](ae-08-feature-engineering_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_ratings |>\n  mutate(season = as_factor(season)) |>\n  ggplot(aes(x = season, y = imdb_rating, color = season)) +\n  geom_boxplot() +\n  geom_jitter() +\n  guides(color = \"none\") +\n  labs(\n    title = \"The Office ratings\",\n    x = \"Season\",\n    y = \"IMDB rating\"\n  ) +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output-display}\n![](ae-08-feature-engineering_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Test/train split\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\noffice_split <- initial_split(office_ratings) # prop = 3/4 by default\noffice_train <- training(office_split)\noffice_test  <- testing(office_split)\n```\n:::\n\n\n## Build a recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_rec <- recipe(imdb_rating ~ ., data = office_train) |>\n  # make title's role ID\n  update_role(title, new_role = \"ID\") |>\n  # extract day of week and month of air_date\n  step_date(air_date, features = c(\"dow\", \"month\")) |>\n  # identify holidays and add indicators\n  step_holiday(\n    air_date, \n    holidays = c(\"USThanksgivingDay\", \"USChristmasDay\", \"USNewYearsDay\", \"USIndependenceDay\"), \n    keep_original_cols = FALSE\n  ) |>\n  # turn season into factor\n  step_num2factor(season, levels = as.character(1:9)) |>\n  # make dummy variables\n  step_dummy(all_nominal_predictors()) |>\n  # remove zero variance predictors\n  step_zv(all_predictors())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_rec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\nHoliday features from air_date\nFactor variables from season\nDummy variables from all_nominal_predictors()\nZero variance filter on all_predictors()\n```\n:::\n:::\n\n\n## Workflows and model fitting\n\n### Specify model\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_spec <- linear_reg() |>\n  set_engine(\"lm\")\n\noffice_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\n### Build workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_wflow <- workflow() |>\n  add_model(office_spec) |>\n  add_recipe(office_rec)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n5 Recipe Steps\n\n• step_date()\n• step_holiday()\n• step_num2factor()\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\n### Fit model to training data\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_fit <- office_wflow |>\n  fit(data = office_train)\n\ntidy(office_fit) |>\n  kable(digits = 3)\n```\n\n::: {.cell-output-display}\n|term               | estimate| std.error| statistic| p.value|\n|:------------------|--------:|---------:|---------:|-------:|\n|(Intercept)        |    6.396|     0.510|    12.532|   0.000|\n|episode            |   -0.004|     0.017|    -0.230|   0.818|\n|total_votes        |    0.000|     0.000|     9.074|   0.000|\n|season_X2          |    0.811|     0.327|     2.482|   0.014|\n|season_X3          |    1.042|     0.343|     3.040|   0.003|\n|season_X4          |    1.090|     0.295|     3.695|   0.000|\n|season_X5          |    1.082|     0.348|     3.109|   0.002|\n|season_X6          |    1.004|     0.367|     2.735|   0.007|\n|season_X7          |    1.018|     0.352|     2.894|   0.005|\n|season_X8          |    0.497|     0.348|     1.430|   0.155|\n|season_X9          |    0.621|     0.345|     1.802|   0.074|\n|air_date_dow_Tue   |    0.382|     0.422|     0.904|   0.368|\n|air_date_dow_Thu   |    0.284|     0.389|     0.731|   0.466|\n|air_date_month_Feb |   -0.060|     0.132|    -0.452|   0.652|\n|air_date_month_Mar |   -0.075|     0.156|    -0.481|   0.631|\n|air_date_month_Apr |    0.095|     0.177|     0.539|   0.591|\n|air_date_month_May |    0.156|     0.213|     0.734|   0.464|\n|air_date_month_Sep |   -0.078|     0.223|    -0.348|   0.728|\n|air_date_month_Oct |   -0.176|     0.174|    -1.014|   0.313|\n|air_date_month_Nov |   -0.156|     0.149|    -1.046|   0.298|\n|air_date_month_Dec |    0.170|     0.149|     1.143|   0.255|\n:::\n:::\n\n\n## Evaluate model on training data\n\n### Make predictions\n\n::: callout-important\nFill in the code and make `#| eval: true` before rendering the document.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_train_pred <- predict(office_fit, ______) |>\n  bind_cols(_____)\n```\n:::\n\n\n### Calculate $R^2$\n\n::: callout-important\nFill in the code and make `#| eval: true` before rendering the document.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsq(office_train_pred, truth = _____, estimate = _____)\n```\n:::\n\n\n-   What is preferred - high or low values of $R^2$?\n\n### Calculate RMSE\n\n::: callout-important\nFill in the code and make `#| eval: true` before rendering the document.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(______, ________, ________)\n```\n:::\n\n\n-   What is preferred - high or low values of RMSE?\n\n-   Is this RMSE considered high or low? *Hint: Consider the range of the response variable to answer this question*.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    office_train |>\n      summarise(min = min(imdb_rating), max = max(imdb_rating))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 1 × 2\n        min   max\n      <dbl> <dbl>\n    1   6.7   9.7\n    ```\n    :::\n    :::\n\n\n## Evaluate model on testing data\n\nAnswer the following before evaluating the model performance on testing data:\n\n-   Do you expect $R^2$ on the testing data to be higher or lower than the $R^2$ calculated using training data? Why?\n\n-   Do you expect RMSE on the testing data to be higher or lower than the $R^2$ calculated using training data? Why?\n\n### Make predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fill in code to make predictions from testing data\n```\n:::\n\n\n### Calculate $R^2$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fill in code to calculate $R^2$ for testing data\n```\n:::\n\n\n### Calculate RMSE\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fill in code to calculate RMSE for testing data\n```\n:::\n\n\n## Compare training and testing data results\n\n-   Compare the $R^2$ for the training and testing data. Is this what you expected?\n\n-   Compare the RMSE for the training and testing data. Is this what you expected?\n",
    "supporting": [
      "ae-08-feature-engineering_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}