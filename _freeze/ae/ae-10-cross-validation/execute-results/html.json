{
  "hash": "f7f3af425e91034bf9a0a9b35aa3e620",
  "result": {
    "markdown": "---\ntitle: \"AE 10: Cross validation\"\nsubtitle: \"The Office\"\ndate: \"Oct 24, 2022\"\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta210-fa22) and locate your `ae-10`- to get started.\n\nThe AE is due on GitHub by Thursday, October 27 at 11:59pm.\n:::\n\n## Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to calculate model fit statistics\ncalc_model_stats <- function(x) {\n  glance(extract_fit_parsnip(x)) |>\n    select(adj.r.squared, AIC, BIC)\n}\n```\n:::\n\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\n```\n:::\n\n\n## Load data\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_episodes <- read_csv(\"data/office_episodes.csv\")\n```\n:::\n\n\n## Split data into training and testing\n\nSplit your data into testing and training sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\noffice_split <- initial_split(office_episodes)\noffice_train <- training(office_split)\noffice_test <- testing(office_split)\n```\n:::\n\n\n## Specify model\n\nSpecify a linear regression model. Call it `office_spec`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_spec <- linear_reg() |>\n  set_engine(\"lm\")\n\noffice_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\n# Model 1\n\n## Create recipe\n\nCreate the recipe from class. Call it `office_rec1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_rec1 <- recipe(imdb_rating ~ ., data = office_train) |>\n  update_role(episode_name, new_role = \"id\") |>\n  step_rm(air_date, season) |>\n  step_dummy(all_nominal_predictors()) |>\n  step_zv(all_predictors())\n\noffice_rec1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        id          1\n   outcome          1\n predictor         12\n\nOperations:\n\nVariables removed air_date, season\nDummy variables from all_nominal_predictors()\nZero variance filter on all_predictors()\n```\n:::\n:::\n\n\n## Preview recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep(office_rec1) |>\n  bake(office_train) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 139\nColumns: 12\n$ episode       <dbl> 20, 16, 8, 7, 23, 3, 16, 21, 18, 14, 27, 28, 12, 1, 23, …\n$ episode_name  <fct> \"Welcome Party\", \"Moving On\", \"Performance Review\", \"The…\n$ total_votes   <dbl> 1489, 1572, 2416, 1406, 2783, 1802, 2283, 2041, 1445, 14…\n$ lines_jim     <dbl> 0.12703583, 0.05588822, 0.09523810, 0.07482993, 0.078291…\n$ lines_pam     <dbl> 0.10423453, 0.10978044, 0.10989011, 0.15306122, 0.081850…\n$ lines_michael <dbl> 0.0000000, 0.0000000, 0.3772894, 0.0000000, 0.3736655, 0…\n$ lines_dwight  <dbl> 0.07166124, 0.08782435, 0.15384615, 0.18027211, 0.135231…\n$ imdb_rating   <dbl> 7.2, 8.2, 8.2, 7.7, 9.1, 8.2, 8.3, 8.9, 8.0, 7.8, 8.7, 8…\n$ halloween_yes <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ valentine_yes <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ christmas_yes <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,…\n$ michael_yes   <dbl> 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,…\n```\n:::\n:::\n\n\n## Create workflow\n\nCreate the workflow that brings together the model specification and recipe. Call it `office_wflow1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_wflow1 <- workflow() |>\n  add_model(office_spec) |>\n  add_recipe(office_rec1)\n\noffice_wflow1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_rm()\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\n# Cross validation\n\n## Create folds\n\nCreate 10-folds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make 10 folds\nset.seed(345)\nfolds <- vfold_cv(office_train, v = 10)\n```\n:::\n\n\n## Conduct cross validation\n\nConduct cross validation on the 10 folds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(456)\n# Fit model and calculate statistics for each fold\noffice_fit_rs1 <- office_wflow1 |>\n  fit_resamples(resamples = folds, \n                control = control_resamples(extract = calc_model_stats))\n```\n:::\n\n\n## Summarize assessment CV metrics\n\nSummarize assessment metrics from your CV resamples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(office_fit_rs1, summarize = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   0.339    10  0.0227 Preprocessor1_Model1\n2 rsq     standard   0.567    10  0.0458 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## Summarize model fit CV metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_df(office_fit_rs1$.extracts, ~ .x[[1]][[1]]) |>\n  summarise(mean_adj_rsq = mean(adj.r.squared), \n            mean_aic = mean(AIC), \n            mean_bic = mean(BIC))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_adj_rsq mean_aic mean_bic\n         <dbl>    <dbl>    <dbl>\n1        0.583     90.8     125.\n```\n:::\n:::\n\n\n# Another model - Model 2\n\nCreate a different (simpler, involving fewer variables) recipe and call it `office_rec2`. Conduct 10-fold cross validation and summarize metrics.\n\n## Model 2: Recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Model 2: Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Model 2: Conduct CV\n\n::: callout-note\nNote: We will use the same folds as the ones used for Model 1. Why should we use the same folds to evaluate and compare both models?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Model 2: Summarize assessment CV metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Model 2: Summarize model fit CV metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n# Compare models\n\nDescribe how the two models compare to each other based on cross validation metrics.\n\n# \n",
    "supporting": [
      "ae-10-cross-validation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}