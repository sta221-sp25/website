{
  "hash": "bbe1debe771441c2d024770b2d84d62a",
  "result": {
    "markdown": "---\ntitle: \"AE 10: Model workflow\"\nsubtitle: \"Peer-to-peer lender\"\ndate: \"Oct 11, 2023\"\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta210-fa23) and locate your `ae-10` repo to get started.\n\nRender, commit, and push your responses to GitHub by the end of class. The responses are due in your GitHub repo no later than Saturday, October 14 at 11:59pm.\n:::\n\n## Packages + data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(openintro)\n```\n:::\n\n\nThe data for this AE is from the `loan50` data set in the **openintro** R package. We will focus on the following variables:\n\n**Predictors**\n\n-   `annual_income`: Annual income (in US dollars)\n-   `debt_to_income`: Debt-to-income ratio, i.e. the percentage of a borrower's total debt divided by their total income\n-   `verified_income`: Whether borrower's income source and amount have been verified (`Not Verified`, `Source Verified`, `Verified`)\n\n**Response**\n\n-   `interest_rate`: Interest rate for the loan (0- 100)\n\n## Analysis goal\n\nThe goals of this analysis are to build a recipe to fit a linear regression model on the training data that has the following features:\n\n-   `annual_income` rescaled to thousands of dollars\n    -   Do not include the original variable `annual_income` in the model\n-   Mean-centered quantitative variables\n-   Indicator (dummy) variables for the categorical predictor\n-   Interaction term between rescaled `annual_income` and `verified_income`\n\nand (2) use `prep()` and `bake()` to check the recipe\n\n## Relevel `verified_income`\n\nMake `Verified` the baseline level for the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 <- loan50 |>\n  mutate(verified_income = factor(verified_income,\n                                  levels = c(\"Verified\", \"Not Verified\", \n                                             \"Source Verified\")))\n```\n:::\n\n\n## Test/train split\n\nSplit the data into 90% training, 10% testing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nloan_split <- initial_split(loan50, prop = 0.9)\nloan_train <- training(loan_split)\nloan_test  <- testing(loan_split)\n```\n:::\n\n\n## Build (and troubleshoot) recipe\n\n-   Use `step_mutate()` to create a new variable `annual_income_th` that is `annual_income` rescaled to thousands of dollars\n\n-   Use `step_rm()` to remove `annual_income` from the model\n\n-   Use `step_center()` to mean-center quantitative variables\n\n-   Use `step_dummy()` to create indicator variables for the categorical predictor\n\n-   Use `step_interact()` to create interaction between `annual_income_th` and `verified_income`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_rec <-  recipe(interest_rate ~ annual_income + debt_to_income + verified_income, \n                    data = loan_train) |>\n  step_mutate(annual_income_th = annual_income / 1000) |>\n  step_rm(annual_income) |>\n  step_center(all_numeric_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  step_interact(terms = ~ annual_income_th:verified_income) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_rec\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Recipe ──────────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Inputs \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNumber of variables by role\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\noutcome:   1\npredictor: 3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Operations \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Variable mutation for: annual_income / 1000\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Variables removed: annual_income\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Centering for: all_numeric_predictors()\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Dummy variables from: all_nominal_predictors()\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Interactions with: annual_income_th:verified_income\n```\n:::\n:::\n\n\n### Check recipe using `prep()` and `bake()`\n\nOnce you've corrected the code, remove `#| eval: false` before rendering the document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_rec |>\n  prep() |>\n  bake(loan_train) |>\n  glimpse()\n```\n:::\n\n\n-   In which step do we have an error?\n\n-   [Click here](https://recipes.tidymodels.org/reference/index.html){target=\"”_blank”\"} to access the recipes reference page. Find the reference page for the relevant `step_` function.\n\n-   See the examples at the bottom of the reference page. Which model most closely aligns the interaction we're trying to create?\n\n-   Use example to help you fix the code. Then, use `prep()` and `bake()` to see the updated results.\n\n## Workflows and model fitting\n\n### Specify model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_spec <- linear_reg() |>\n  set_engine(\"lm\")\n\nloan_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\n### Build workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_wflow <- workflow() |>\n  add_model(loan_spec) |>\n  add_recipe(loan_rec)\n\nloan_wflow\n```\n:::\n\n\n### Fit model to training data\n\nRemove `#| eval: false` before rendering the document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_fit <- loan_wflow |>\n  fit(data = loan_train)\n\ntidy(loan_fit) |>\n  kable(digits = 3)\n```\n:::\n\n\n## Evaluate model on training data\n\n### Make predictions\n\nFill in the code and remove `#| eval: false` before rendering the document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_train_pred <- predict(loan_fit, ______) |>\n  bind_cols(_____)\n```\n:::\n\n\n### Calculate $R^2$\n\nFill in the code and remove `#| eval: false` before rendering the document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsq(loan_train_pred, truth = _____, estimate = _____)\n```\n:::\n\n\n### Calculate RMSE\n\nFill in the code and remove `#| eval: false` before rendering the document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(______, ________, ________)\n```\n:::\n\n\n-   Is this RMSE considered high or low? *Hint: Consider the range of the response variable to answer this question*.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    loan_train |>\n      summarise(min = min(interest_rate), max = max(interest_rate))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 1 × 2\n        min   max\n      <dbl> <dbl>\n    1  5.31  26.3\n    ```\n    :::\n    :::\n\n\n## Evaluate model on testing data\n\n### Make predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fill in code to make predictions from testing data\n```\n:::\n\n\n### Calculate $R^2$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fill in code to calculate R-sq for testing data\n```\n:::\n\n\n### Calculate RMSE\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fill in code to calculate RMSE for testing data\n```\n:::\n\n\n## Compare training and testing data results\n\n-   Compare the $R^2$ for the training and testing data. Is this what you expected?\n\n-   Compare the RMSE for the training and testing data. Is this what you expected?\n\n## To submit the AE\n\n::: callout-important\n-   Render the document to produce the PDF with all of your work from today's class.\n-   Push all your work to your `ae-10` repo on GitHub. (You do not submit AEs on Gradescope).\n:::\n",
    "supporting": [
      "ae-10-model-workflow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}