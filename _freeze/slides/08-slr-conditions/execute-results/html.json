{
  "hash": "177b9f61e7b446c5d0618cfa99b17f41",
  "result": {
    "markdown": "---\ntitle: \"SLR: Conditions\"\nauthor: \"Prof. Maria Tackett\"\ndate: \"2022-09-21\"\ndate-format: \"MMM DD, YYYY\"\nfooter: \"[ðŸ”— Week 04](https://sta210-fa22.netlify.app/weeks/week-04.html)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: true\n  warning: false\n  message: false\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\n---\n\n\n\n\n## Announcements\n\n-   HW 01: due TODAY at 11:59pm\n\n-   [Statistics experience](https://sta210-fa22.netlify.app/hw/stats-experience.html) - due Fri, Dec 09 at 11:59pm\n\n-   Aaditya's office hours today: 1 - 2pm and 7 -8pm on Zoom (link in Sakai)\n\n-   See [Week 04](https://sta210-fa22.netlify.app/weeks/week-04.html) for this week's activities.\n\n-   Updated masking policy starting Sep 22\n\n-   Looking ahead: Exam 01: Sep 28 - 30\n\n## Exam 01 {.midi}\n\n-   Released Sep 28 late afternoon, due Sep 30 at 11:59pm.\n\n    -   No labs or office hours Sep 28 - 30\n\n-   Covers content Weeks 01 - 05\n\n-   Conceptual questions + analysis problems\n\n-   Will receive exam through GitHub repo, use a reproducible workflow and submit on GitHub and Gradescope (like labs and HW)\n\n-   Lecture recordings for Weeks 01 -05 available [here](https://prodduke-my.sharepoint.com/:x:/g/personal/mt324_duke_edu/EfXF6q4ev7dNq53PBcDetSgBrNry2EB85vWv2xrUzGahbg?e=i3gLl6) until September 28 at 11:59pm.\n\n-   Lab and HW solutions will be posted after the late submission deadlines.\n\n-   Exam 01 review in class on September 28\n\n## Computational set up\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)   # for data wrangling and visualization\nlibrary(tidymodels)  # for modeling\nlibrary(openintro)   # for the duke_forest dataset\nlibrary(scales)      # for pretty axis labels\nlibrary(knitr)       # for pretty tables\nlibrary(kableExtra)  # also for pretty tables\nlibrary(patchwork)   # arrange plots\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_bw(base_size = 20))\n```\n:::\n\n\n## Regression model, revisited\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_fit <- linear_reg() |>\n  set_engine(\"lm\") |>\n  fit(price ~ area, data = duke_forest)\n\ntidy(df_fit) |>\n  kable(digits = 3)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:right;\"> estimate </th>\n   <th style=\"text-align:right;\"> std.error </th>\n   <th style=\"text-align:right;\"> statistic </th>\n   <th style=\"text-align:right;\"> p.value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:right;\"> 116652.325 </td>\n   <td style=\"text-align:right;\"> 53302.463 </td>\n   <td style=\"text-align:right;\"> 2.188 </td>\n   <td style=\"text-align:right;\"> 0.031 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> area </td>\n   <td style=\"text-align:right;\"> 159.483 </td>\n   <td style=\"text-align:right;\"> 18.171 </td>\n   <td style=\"text-align:right;\"> 8.777 </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Mathematical representation, visualized {.midi}\n\n\n$$\nY|X \\sim N(\\beta_0 + \\beta_1 X, \\sigma_\\epsilon^2)\n$$\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Model conditions\n\n1.  **Linearity:** There is a linear relationship between the outcome and predictor variables\n2.  **Constant variance:** The variability of the errors is equal for all values of the predictor variable, i.e. the errors are homeoscedastic\n3.  **Normality:** The errors follow a normal distribution\n4.  **Independence:** The errors are independent from each other\n\n## Linearity\n\nâœ… The residuals vs. fitted values plot should show a random scatter of residuals (no distinguishable pattern or structure)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/res-vs-fit-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Residuals vs. fitted values (code)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_aug <- augment(df_fit$fit)\n\nggplot(df_aug, aes(x = .fitted, y = .resid)) +\n  geom_point() +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  ylim(-1000000, 1000000) +\n  labs(\n    x = \"Fitted value\", y = \"Residual\",\n    title = \"Residuals vs. fitted values\"\n  )\n```\n:::\n\n\n## Non-linear relationships\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Constant variance\n\nâœ… The vertical spread of the residuals should be relatively constant across the plot\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Non-constant variance\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Normality\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-slr-conditions_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Independence\n\n-   We can often check the independence assumption based on the context of the data and how the observations were collected\n\n-   If the data were collected in a particular order, examine a scatterplot of the residuals versus order in which the data were collected\n\n. . .\n\nâœ… If this is a random sample of Duke Houses, the error for one house does not tell us anything about the error for another use\n\n## Recap\n\nUsed residual plots to check conditions for SLR:\n\n::: columns\n::: {.column width=\"50%\"}\n::: nonincremental\n-   Linearity\n-   Constant variance\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: nonincremental\n-   Normality\n-   Independence\n:::\n:::\n:::\n\n. . .\n\n::: question\nWhich of these conditions are required for fitting a SLR? Which for simulation-based inference for the slope for an SLR? Which for inference with mathematical models?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_6331c6d9\" style=\"right:0;bottom:0;font-size:2em;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n",
    "supporting": [
      "08-slr-conditions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.3.5/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.3.5/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}